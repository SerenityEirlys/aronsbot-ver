import { SlashCommandBuilder, EmbedBuilder } from 'discord.js';
import { pool, checkKey } from '../../db/mysql.js';

export default {
    data: new SlashCommandBuilder()
        .setName('checkkey')
        .setDescription('Ki·ªÉm tra tr·∫°ng th√°i c·ªßa key ho·∫∑c HWID')
        .addStringOption(option =>
            option.setName('input')
                .setDescription('Nh·∫≠p key ho·∫∑c HWID c·∫ßn ki·ªÉm tra')
                .setRequired(true)),

    async execute(interaction) {
        await interaction.deferReply({ ephemeral: true });
        
        const input = interaction.options.getString('input');
        
        try {
            const keyData = await checkKey(input);

            if (!keyData.length) {
                return interaction.editReply({
                    content: '‚ùå Kh√¥ng t√¨m th·∫•y key ho·∫∑c HWID trong h·ªá th·ªëng!'
                });
            }

            const embed = new EmbedBuilder()
                .setTitle('üîç K·∫øt qu·∫£ ki·ªÉm tra')
                .setTimestamp();

            if (keyData.length > 0) {
                const now = new Date();
                const expiryDate = new Date(keyData[0].expiryDate);
                const timeLeft = expiryDate - now;
                const daysLeft = Math.max(0, Math.ceil(timeLeft / (1000 * 60 * 60 * 24)));

                embed.setColor(timeLeft > 0 ? '#00FF00' : '#FF0000')
                    .addFields(
                        { name: 'Lo·∫°i', value: 'License Key' },
                        { name: 'Key', value: keyData[0].key },
                        { name: 'S·∫£n ph·∫©m', value: keyData[0].product },
                        { name: 'HWID', value: keyData[0].hwid || 'Ch∆∞a k√≠ch ho·∫°t' },
                        { name: 'Tr·∫°ng th√°i', value: timeLeft > 0 ? '‚úÖ ƒêang ho·∫°t ƒë·ªông' : '‚ùå ƒê√£ h·∫øt h·∫°n' },
                        { name: 'Th·ªùi h·∫°n c√≤n l·∫°i', value: timeLeft > 0 ? `${daysLeft} ng√†y` : 'ƒê√£ h·∫øt h·∫°n' },
                        { name: 'Ng√†y h·∫øt h·∫°n', value: expiryDate.toLocaleDateString('vi-VN') },
                        { name: 'Ng∆∞·ªùi s·ª≠ d·ª•ng', value: keyData[0].usedBy || 'Ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng' },
                        { name: 'Ng√†y k√≠ch ho·∫°t', value: keyData[0].usedAt ? new Date(keyData[0].usedAt).toLocaleDateString('vi-VN') : 'Ch∆∞a k√≠ch ho·∫°t' }
                    );
            }

            await interaction.editReply({ embeds: [embed] });

        } catch (error) {
            console.error('Error checking key/HWID:', error);
            await interaction.editReply({
                content: '‚ùå ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra th√¥ng tin! Vui l√≤ng th·ª≠ l·∫°i sau.'
            });
        }
    },
};
